#### Start of system configuration section. ####

srcdir =	@srcdir@
VPATH =		@srcdir@

CC =		@CC@
CPP =           @CPP@
AS =		as

RANLIB =	@RANLIB@
AWK =           @AWK@

#### End system configuration section ####

include ../../sources/amiga/filelist

CURDIR = $(shell pwd)

OPTIONS=-I $(srcdir)/../headers -I../../sources/headers $(CFLAGS)

SOURCEFILES=*/*

%.o: %.c
	$(CC) $(OPTIONS) -c $^ -o $@ 2>&1|tee $*.err
	-if test ! -s $*.err; then rm $*.err; fi

%.o: %.S
	$(CC) $(OPTIONS) -c $^ -o $@ 2>&1|tee $*.err
	-if test ! -s $*.err; then rm $*.err; fi

.PHONY: all clean veryclean splitinline

all: libamiga.a

clean:
	-rm -rf $(SUBDIRS)

veryclean:
	-rm -rf *

$(foreach f,$(SUBDIRS),$(CURDIR)/$(f)):
	mkdir $@

libamiga.a: $(foreach f,$(SUBDIRS),$(CURDIR)/$(f)) $(OBJECTS) libglue.a ../../sources/amiga/makefile ../../sources/amiga/filelist
	-rm -f libamiga.a
	-cp libglue.a libamiga.a
	ar -q libamiga.a $(OBJECTS)
	$(RANLIB) libamiga.a

libglue.a:
	if [ -d tmp ] ; then rm -rf tmp ; else true ; fi
	-mkdir tmp
# Build assembler stubs out of inline headers:
# * First transform all vararg #defines into real functions
# * Compile all functions with 'extern' and '__inline' disabled
# * Split resulting assembler output at function entries
# * This needs old-style inlines!
	-cd tmp; \
	echo "" >dummy.c; \
	for file in /gg/include/inline/*.h; do \
	( $(AWK) 'nf==1 { fn=$$1;nf=0 } \
	        /inline/ { vs="long";rs="return ";nf=1 } \
	        /void/ { vs="void";rs="";nf=1 } \
	        /\.\.\./ \
	        { st=substr($$0,1,index($$0,"tags...")-1); \
	          st=substr(st,index(st," ")); \
	          st2=st;gsub(/\(/,"(long ",st2);gsub(/,/,",long ",st2); \
	          print "#undef" substr(st,1,index(st,"(")-1) "\n" vs st2 "tags,...)"; \
	          print "{ " rs fn substr(st,index(st,"(")) "&tags); }\n" \
	        }' $$file >vararg.c; \
	  ( $(CC) $(CFLAGS) -w -include $$file vararg.c -S -o -; \
	    $(CC) -Dextern= -D__inline= -D_STRSUP_H -include $$file $(CFLAGS) dummy.c -S -o - ) | \
	  $(AWK) '/.even/ { next } /.comm/ { next } \
	        /.globl/ { if(file!="") close(file); file=$$2 ".s"; \
	                   print "\t.even\n" $$0 >file; next; } \
	        { if(file!="") print $$0 >file; }' ); done
	-cd tmp;rm vararg.c dummy.c;$(CC) -c *.s
	-rm libglue.a
	-cd tmp;ar -q ../libglue.a *.o
	-rm -rf tmp
